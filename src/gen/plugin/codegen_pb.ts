// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file plugin/codegen.proto (package plugin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugin.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bytes contents = 2;
   */
  contents = new Uint8Array(0);

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message plugin.Settings
 */
export class Settings extends Message<Settings> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string engine = 2;
   */
  engine = "";

  /**
   * @generated from field: repeated string schema = 3;
   */
  schema: string[] = [];

  /**
   * @generated from field: repeated string queries = 4;
   */
  queries: string[] = [];

  /**
   * @generated from field: plugin.Codegen codegen = 12;
   */
  codegen?: Codegen;

  constructor(data?: PartialMessage<Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "engine", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "queries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "codegen", kind: "message", T: Codegen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Settings {
    return new Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJsonString(jsonString, options);
  }

  static equals(a: Settings | PlainMessage<Settings> | undefined, b: Settings | PlainMessage<Settings> | undefined): boolean {
    return proto3.util.equals(Settings, a, b);
  }
}

/**
 * @generated from message plugin.Codegen
 */
export class Codegen extends Message<Codegen> {
  /**
   * @generated from field: string out = 1;
   */
  out = "";

  /**
   * @generated from field: string plugin = 2;
   */
  plugin = "";

  /**
   * @generated from field: bytes options = 3;
   */
  options = new Uint8Array(0);

  /**
   * @generated from field: repeated string env = 4;
   */
  env: string[] = [];

  /**
   * @generated from field: plugin.Codegen.Process process = 5;
   */
  process?: Codegen_Process;

  /**
   * @generated from field: plugin.Codegen.WASM wasm = 6;
   */
  wasm?: Codegen_WASM;

  constructor(data?: PartialMessage<Codegen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Codegen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "env", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "process", kind: "message", T: Codegen_Process },
    { no: 6, name: "wasm", kind: "message", T: Codegen_WASM },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Codegen {
    return new Codegen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Codegen {
    return new Codegen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Codegen {
    return new Codegen().fromJsonString(jsonString, options);
  }

  static equals(a: Codegen | PlainMessage<Codegen> | undefined, b: Codegen | PlainMessage<Codegen> | undefined): boolean {
    return proto3.util.equals(Codegen, a, b);
  }
}

/**
 * @generated from message plugin.Codegen.Process
 */
export class Codegen_Process extends Message<Codegen_Process> {
  /**
   * @generated from field: string cmd = 1;
   */
  cmd = "";

  constructor(data?: PartialMessage<Codegen_Process>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Codegen.Process";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Codegen_Process {
    return new Codegen_Process().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Codegen_Process {
    return new Codegen_Process().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Codegen_Process {
    return new Codegen_Process().fromJsonString(jsonString, options);
  }

  static equals(a: Codegen_Process | PlainMessage<Codegen_Process> | undefined, b: Codegen_Process | PlainMessage<Codegen_Process> | undefined): boolean {
    return proto3.util.equals(Codegen_Process, a, b);
  }
}

/**
 * @generated from message plugin.Codegen.WASM
 */
export class Codegen_WASM extends Message<Codegen_WASM> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string sha256 = 2;
   */
  sha256 = "";

  constructor(data?: PartialMessage<Codegen_WASM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Codegen.WASM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sha256", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Codegen_WASM {
    return new Codegen_WASM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Codegen_WASM {
    return new Codegen_WASM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Codegen_WASM {
    return new Codegen_WASM().fromJsonString(jsonString, options);
  }

  static equals(a: Codegen_WASM | PlainMessage<Codegen_WASM> | undefined, b: Codegen_WASM | PlainMessage<Codegen_WASM> | undefined): boolean {
    return proto3.util.equals(Codegen_WASM, a, b);
  }
}

/**
 * @generated from message plugin.Catalog
 */
export class Catalog extends Message<Catalog> {
  /**
   * @generated from field: string comment = 1;
   */
  comment = "";

  /**
   * @generated from field: string default_schema = 2;
   */
  defaultSchema = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated plugin.Schema schemas = 4;
   */
  schemas: Schema[] = [];

  constructor(data?: PartialMessage<Catalog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Catalog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "default_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schemas", kind: "message", T: Schema, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Catalog {
    return new Catalog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Catalog {
    return new Catalog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Catalog {
    return new Catalog().fromJsonString(jsonString, options);
  }

  static equals(a: Catalog | PlainMessage<Catalog> | undefined, b: Catalog | PlainMessage<Catalog> | undefined): boolean {
    return proto3.util.equals(Catalog, a, b);
  }
}

/**
 * @generated from message plugin.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * @generated from field: string comment = 1;
   */
  comment = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated plugin.Table tables = 3;
   */
  tables: Table[] = [];

  /**
   * @generated from field: repeated plugin.Enum enums = 4;
   */
  enums: Enum[] = [];

  /**
   * @generated from field: repeated plugin.CompositeType composite_types = 5;
   */
  compositeTypes: CompositeType[] = [];

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tables", kind: "message", T: Table, repeated: true },
    { no: 4, name: "enums", kind: "message", T: Enum, repeated: true },
    { no: 5, name: "composite_types", kind: "message", T: CompositeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

/**
 * @generated from message plugin.CompositeType
 */
export class CompositeType extends Message<CompositeType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  constructor(data?: PartialMessage<CompositeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.CompositeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompositeType {
    return new CompositeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompositeType {
    return new CompositeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompositeType {
    return new CompositeType().fromJsonString(jsonString, options);
  }

  static equals(a: CompositeType | PlainMessage<CompositeType> | undefined, b: CompositeType | PlainMessage<CompositeType> | undefined): boolean {
    return proto3.util.equals(CompositeType, a, b);
  }
}

/**
 * @generated from message plugin.Enum
 */
export class Enum extends Message<Enum> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string vals = 2;
   */
  vals: string[] = [];

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  constructor(data?: PartialMessage<Enum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Enum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vals", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enum {
    return new Enum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enum {
    return new Enum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enum {
    return new Enum().fromJsonString(jsonString, options);
  }

  static equals(a: Enum | PlainMessage<Enum> | undefined, b: Enum | PlainMessage<Enum> | undefined): boolean {
    return proto3.util.equals(Enum, a, b);
  }
}

/**
 * @generated from message plugin.Table
 */
export class Table extends Message<Table> {
  /**
   * @generated from field: plugin.Identifier rel = 1;
   */
  rel?: Identifier;

  /**
   * @generated from field: repeated plugin.Column columns = 2;
   */
  columns: Column[] = [];

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  constructor(data?: PartialMessage<Table>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Table";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rel", kind: "message", T: Identifier },
    { no: 2, name: "columns", kind: "message", T: Column, repeated: true },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Table {
    return new Table().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJsonString(jsonString, options);
  }

  static equals(a: Table | PlainMessage<Table> | undefined, b: Table | PlainMessage<Table> | undefined): boolean {
    return proto3.util.equals(Table, a, b);
  }
}

/**
 * @generated from message plugin.Identifier
 */
export class Identifier extends Message<Identifier> {
  /**
   * @generated from field: string catalog = 1;
   */
  catalog = "";

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<Identifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Identifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identifier {
    return new Identifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJsonString(jsonString, options);
  }

  static equals(a: Identifier | PlainMessage<Identifier> | undefined, b: Identifier | PlainMessage<Identifier> | undefined): boolean {
    return proto3.util.equals(Identifier, a, b);
  }
}

/**
 * @generated from message plugin.Column
 */
export class Column extends Message<Column> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool not_null = 3;
   */
  notNull = false;

  /**
   * @generated from field: bool is_array = 4;
   */
  isArray = false;

  /**
   * @generated from field: string comment = 5;
   */
  comment = "";

  /**
   * @generated from field: int32 length = 6;
   */
  length = 0;

  /**
   * @generated from field: bool is_named_param = 7;
   */
  isNamedParam = false;

  /**
   * @generated from field: bool is_func_call = 8;
   */
  isFuncCall = false;

  /**
   * XXX: Figure out what PostgreSQL calls `foo.id`
   *
   * @generated from field: string scope = 9;
   */
  scope = "";

  /**
   * @generated from field: plugin.Identifier table = 10;
   */
  table?: Identifier;

  /**
   * @generated from field: string table_alias = 11;
   */
  tableAlias = "";

  /**
   * @generated from field: plugin.Identifier type = 12;
   */
  type?: Identifier;

  /**
   * @generated from field: bool is_sqlc_slice = 13;
   */
  isSqlcSlice = false;

  /**
   * @generated from field: plugin.Identifier embed_table = 14;
   */
  embedTable?: Identifier;

  /**
   * @generated from field: string original_name = 15;
   */
  originalName = "";

  /**
   * @generated from field: bool unsigned = 16;
   */
  unsigned = false;

  /**
   * @generated from field: int32 array_dims = 17;
   */
  arrayDims = 0;

  constructor(data?: PartialMessage<Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "not_null", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "is_array", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "is_named_param", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "is_func_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "table", kind: "message", T: Identifier },
    { no: 11, name: "table_alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "type", kind: "message", T: Identifier },
    { no: 13, name: "is_sqlc_slice", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "embed_table", kind: "message", T: Identifier },
    { no: 15, name: "original_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unsigned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "array_dims", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Column {
    return new Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJsonString(jsonString, options);
  }

  static equals(a: Column | PlainMessage<Column> | undefined, b: Column | PlainMessage<Column> | undefined): boolean {
    return proto3.util.equals(Column, a, b);
  }
}

/**
 * @generated from message plugin.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string cmd = 3;
   */
  cmd = "";

  /**
   * @generated from field: repeated plugin.Column columns = 4;
   */
  columns: Column[] = [];

  /**
   * @generated from field: repeated plugin.Parameter params = 5 [json_name = "parameters"];
   */
  params: Parameter[] = [];

  /**
   * @generated from field: repeated string comments = 6;
   */
  comments: string[] = [];

  /**
   * @generated from field: string filename = 7;
   */
  filename = "";

  /**
   * @generated from field: plugin.Identifier insert_into_table = 8 [json_name = "insert_into_table"];
   */
  insertIntoTable?: Identifier;

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "columns", kind: "message", T: Column, repeated: true },
    { no: 5, name: "params", jsonName: "parameters", kind: "message", T: Parameter, repeated: true },
    { no: 6, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "insert_into_table", jsonName: "insert_into_table", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * @generated from message plugin.Parameter
 */
export class Parameter extends Message<Parameter> {
  /**
   * @generated from field: int32 number = 1;
   */
  number = 0;

  /**
   * @generated from field: plugin.Column column = 2;
   */
  column?: Column;

  constructor(data?: PartialMessage<Parameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.Parameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "column", kind: "message", T: Column },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Parameter {
    return new Parameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Parameter {
    return new Parameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Parameter {
    return new Parameter().fromJsonString(jsonString, options);
  }

  static equals(a: Parameter | PlainMessage<Parameter> | undefined, b: Parameter | PlainMessage<Parameter> | undefined): boolean {
    return proto3.util.equals(Parameter, a, b);
  }
}

/**
 * @generated from message plugin.GenerateRequest
 */
export class GenerateRequest extends Message<GenerateRequest> {
  /**
   * @generated from field: plugin.Settings settings = 1;
   */
  settings?: Settings;

  /**
   * @generated from field: plugin.Catalog catalog = 2;
   */
  catalog?: Catalog;

  /**
   * @generated from field: repeated plugin.Query queries = 3;
   */
  queries: Query[] = [];

  /**
   * @generated from field: string sqlc_version = 4 [json_name = "sqlc_version"];
   */
  sqlcVersion = "";

  /**
   * @generated from field: bytes plugin_options = 5 [json_name = "plugin_options"];
   */
  pluginOptions = new Uint8Array(0);

  /**
   * @generated from field: bytes global_options = 6 [json_name = "global_options"];
   */
  globalOptions = new Uint8Array(0);

  constructor(data?: PartialMessage<GenerateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.GenerateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: Settings },
    { no: 2, name: "catalog", kind: "message", T: Catalog },
    { no: 3, name: "queries", kind: "message", T: Query, repeated: true },
    { no: 4, name: "sqlc_version", jsonName: "sqlc_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "plugin_options", jsonName: "plugin_options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "global_options", jsonName: "global_options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRequest {
    return new GenerateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRequest {
    return new GenerateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRequest {
    return new GenerateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRequest | PlainMessage<GenerateRequest> | undefined, b: GenerateRequest | PlainMessage<GenerateRequest> | undefined): boolean {
    return proto3.util.equals(GenerateRequest, a, b);
  }
}

/**
 * @generated from message plugin.GenerateResponse
 */
export class GenerateResponse extends Message<GenerateResponse> {
  /**
   * @generated from field: repeated plugin.File files = 1;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<GenerateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugin.GenerateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateResponse {
    return new GenerateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateResponse {
    return new GenerateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateResponse {
    return new GenerateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateResponse | PlainMessage<GenerateResponse> | undefined, b: GenerateResponse | PlainMessage<GenerateResponse> | undefined): boolean {
    return proto3.util.equals(GenerateResponse, a, b);
  }
}

