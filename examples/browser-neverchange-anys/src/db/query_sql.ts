// Code generated by sqlc. DO NOT EDIT.

import { NeverChangeDB } from "neverchange";

export const getAuthorQuery = `-- name: GetAuthor :one
SELECT id, name, bio, profile_pic, rating, is_active, created_at, data_null FROM authors
WHERE id = ? LIMIT 1`;

export interface GetAuthorArgs {
    id: any;
}

export interface GetAuthorRow {
    id: any;
    name: any;
    bio: any | null;
    profilePic: any | null;
    rating: any | null;
    isActive: any | null;
    createdAt: any | null;
    dataNull: any | null;
}

export async function getAuthor(db: NeverChangeDB, args: GetAuthorArgs): Promise<GetAuthorRow | null> {
    const result = await db.query(getAuthorQuery, [args.id]);
    return result[0];
}

export const listAuthorsQuery = `-- name: ListAuthors :many
SELECT id, name, bio, profile_pic, rating, is_active, created_at, data_null FROM authors
ORDER BY name`;

export interface ListAuthorsRow {
    id: any;
    name: any;
    bio: any | null;
    profilePic: any | null;
    rating: any | null;
    isActive: any | null;
    createdAt: any | null;
    dataNull: any | null;
}

export async function listAuthors(db: NeverChangeDB): Promise<ListAuthorsRow[]> {
    return await db.query(listAuthorsQuery, []);
}

export const createAuthorQuery = `-- name: CreateAuthor :exec
INSERT INTO authors (
  name, bio, profile_pic, rating, is_active
) VALUES (
  ?, ?, ?, ?, ?
)`;

export interface CreateAuthorArgs {
    name: any;
    bio: any | null;
    profilePic: any | null;
    rating: any | null;
    isActive: any | null;
}

export async function createAuthor(db: NeverChangeDB, args: CreateAuthorArgs): Promise<void> {
    await db.execute(createAuthorQuery, [args.name, args.bio, args.profilePic, args.rating, args.isActive]);
}

export const updateAuthorQuery = `-- name: UpdateAuthor :one
UPDATE authors
  SET name = ?, 
      bio = ?
  WHERE id = ?
  RETURNING id, name, bio, profile_pic, rating, is_active, created_at, data_null`;

export interface UpdateAuthorArgs {
    name: any;
    bio: any | null;
    id: any;
}

export interface UpdateAuthorRow {
    id: any;
    name: any;
    bio: any | null;
    profilePic: any | null;
    rating: any | null;
    isActive: any | null;
    createdAt: any | null;
    dataNull: any | null;
}

export async function updateAuthor(db: NeverChangeDB, args: UpdateAuthorArgs): Promise<UpdateAuthorRow | null> {
    const result = await db.query(updateAuthorQuery, [args.name, args.bio, args.id]);
    return result[0];
}

export const updateAuthorRatingQuery = `-- name: UpdateAuthorRating :one
UPDATE authors
  SET rating = ?
  WHERE id = ?
  RETURNING id, name, bio, profile_pic, rating, is_active, created_at, data_null`;

export interface UpdateAuthorRatingArgs {
    rating: any | null;
    id: any;
}

export interface UpdateAuthorRatingRow {
    id: any;
    name: any;
    bio: any | null;
    profilePic: any | null;
    rating: any | null;
    isActive: any | null;
    createdAt: any | null;
    dataNull: any | null;
}

export async function updateAuthorRating(db: NeverChangeDB, args: UpdateAuthorRatingArgs): Promise<UpdateAuthorRatingRow | null> {
    const result = await db.query(updateAuthorRatingQuery, [args.rating, args.id]);
    return result[0];
}

export const deleteAuthorQuery = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?`;

export interface DeleteAuthorArgs {
    id: any;
}

export async function deleteAuthor(db: NeverChangeDB, args: DeleteAuthorArgs): Promise<void> {
    await db.execute(deleteAuthorQuery, [args.id]);
}

